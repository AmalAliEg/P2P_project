# Generated by Django 5.2.3 on 2025-07-14 07:35

import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='P2POffer',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('user_id', models.IntegerField(db_index=True)),
                ('trade_type', models.CharField(choices=[('BUY', 'Buy'), ('SELL', 'Sell')], default='BUY', max_length=4)),
                ('crypto_currency', models.CharField(db_index=True, max_length=10)),
                ('fiat_currency', models.CharField(db_index=True, max_length=10)),
                ('price_type', models.CharField(choices=[('FIXED', 'Fixed'), ('FLOATING', 'Floating')], default='FIXED', max_length=10)),
                ('price', models.DecimalField(decimal_places=2, help_text='Fixed price in fiat currency', max_digits=20, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('price_margin', models.DecimalField(blank=True, decimal_places=2, help_text='Percentage margin for floating price (e.g., 5.00 for +5%', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(Decimal('-10')), django.core.validators.MaxValueValidator(Decimal('10'))])),
                ('total_amount', models.DecimalField(decimal_places=8, max_digits=20, validators=[django.core.validators.MinValueValidator(Decimal('0.00001'))])),
                ('available_amount', models.DecimalField(decimal_places=8, max_digits=20, validators=[django.core.validators.MinValueValidator(Decimal('0'))])),
                ('min_order_limit', models.DecimalField(decimal_places=2, max_digits=20, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('max_order_limit', models.DecimalField(decimal_places=2, max_digits=20, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('payment_method_ids', models.JSONField(default=list)),
                ('payment_time_limit_minutes', models.IntegerField(default=15, validators=[django.core.validators.MinValueValidator(5), django.core.validators.MaxValueValidator(120)])),
                ('remarks', models.TextField(blank=True, max_length=1000, null=True)),
                ('auto_reply_message', models.TextField(blank=True, max_length=1000, null=True)),
                ('counterparty_min_registration_days', models.PositiveIntegerField(default=0)),
                ('counterparty_min_holding_amount', models.DecimalField(decimal_places=8, default=0, max_digits=20)),
                ('status', models.CharField(choices=[('ACTIVE', 'Online'), ('INACTIVE', 'Offline'), ('PRIVATE', 'Private'), ('COMPLETED', 'Completed')], db_index=True, default='ACTIVE', max_length=10)),
            ],
            options={
                'db_table': 'p2p_offer',
            },
        ),
        migrations.CreateModel(
            name='P2PProfile',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('user_id', models.PositiveIntegerField(help_text='ID of the user in the main service', unique=True)),
                ('nickname', models.CharField(max_length=50, unique=True)),
                ('enable_sound_notifications', models.BooleanField(default=True)),
                ('total_30d_trades', models.IntegerField(default=0)),
                ('completion_rate_30d', models.FloatField(default=100.0)),
            ],
            options={
                'db_table': 'p2p_profile',
                'ordering': ['-total_30d_trades'],
            },
        ),
        migrations.CreateModel(
            name='P2POrder',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('order_number', models.CharField(max_length=20, unique=True)),
                ('maker_id', models.IntegerField(db_index=True)),
                ('taker_id', models.IntegerField(db_index=True)),
                ('status', models.CharField(choices=[('UNPAID', 'Unpaid'), ('PAID', 'Paid'), ('APPEAL', 'Appeal in Progress'), ('COMPLETED', 'Completed'), ('CANCELLED', 'Cancelled')], default='UNPAID', max_length=10)),
                ('trade_type', models.CharField(max_length=4)),
                ('crypto_currency', models.CharField(max_length=10)),
                ('fiat_currency', models.CharField(max_length=10)),
                ('price', models.DecimalField(decimal_places=2, max_digits=20)),
                ('crypto_amount', models.DecimalField(decimal_places=8, max_digits=20)),
                ('fiat_amount', models.DecimalField(decimal_places=2, max_digits=20)),
                ('transaction_fee', models.DecimalField(decimal_places=8, default=0, max_digits=20)),
                ('payment_time_limit', models.DateTimeField()),
                ('paid_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('chat_room_id', models.CharField(blank=True, max_length=100, null=True)),
                ('offer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='orders', to='p2p_trading.p2poffer')),
            ],
            options={
                'ordering': ['-created_at'],
                'abstract': False,
            },
        ),
    ]
