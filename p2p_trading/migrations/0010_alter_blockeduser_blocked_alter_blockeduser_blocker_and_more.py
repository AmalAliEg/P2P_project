# Generated by Django 5.2.3 on 2025-07-23 07:18

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('p2p_trading', '0009_blockeduser_cancelled_at_blockeduser_completed_at_and_more'),
    ]

    operations = [
        migrations.AlterField(
            model_name='blockeduser',
            name='blocked',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='blocked_by', to='p2p_trading.p2pprofile'),
        ),
        migrations.AlterField(
            model_name='blockeduser',
            name='blocker',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='blocking', to='p2p_trading.p2pprofile'),
        ),
        migrations.AlterField(
            model_name='feedback',
            name='order',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='p2p_trading.p2porder'),
        ),
        migrations.AlterField(
            model_name='feedback',
            name='reviewee',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='received_feedback', to='p2p_trading.p2pprofile'),
        ),
        migrations.AlterField(
            model_name='feedback',
            name='reviewer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='given_feedback', to='p2p_trading.p2pprofile'),
        ),
        migrations.AlterField(
            model_name='follow',
            name='followed',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='followers', to='p2p_trading.p2pprofile'),
        ),
        migrations.AlterField(
            model_name='follow',
            name='follower',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='following', to='p2p_trading.p2pprofile'),
        ),
        migrations.AddConstraint(
            model_name='p2poffer',
            constraint=models.CheckConstraint(condition=models.Q(('price__gt', 0)), name='price_must_be_positive'),
        ),
        migrations.AddConstraint(
            model_name='p2poffer',
            constraint=models.CheckConstraint(condition=models.Q(('total_amount__gt', 0)), name='total_amount_must_be_positive'),
        ),
        migrations.AddConstraint(
            model_name='p2poffer',
            constraint=models.CheckConstraint(condition=models.Q(('available_amount__gte', 0)), name='available_amount_non_negative'),
        ),
        migrations.AddConstraint(
            model_name='p2poffer',
            constraint=models.CheckConstraint(condition=models.Q(('min_order_limit__gt', 0)), name='min_order_limit_positive'),
        ),
        migrations.AddConstraint(
            model_name='p2poffer',
            constraint=models.CheckConstraint(condition=models.Q(('max_order_limit__gte', models.F('min_order_limit'))), name='max_limit_gte_min_limit'),
        ),
        migrations.AddConstraint(
            model_name='p2poffer',
            constraint=models.CheckConstraint(condition=models.Q(('available_amount__lte', models.F('total_amount'))), name='available_lte_total'),
        ),
        migrations.AddConstraint(
            model_name='p2porder',
            constraint=models.CheckConstraint(condition=models.Q(('crypto_amount__gt', 0)), name='order_crypto_amount_positive'),
        ),
        migrations.AddConstraint(
            model_name='p2porder',
            constraint=models.CheckConstraint(condition=models.Q(('fiat_amount__gt', 0)), name='order_fiat_amount_positive'),
        ),
        migrations.AddConstraint(
            model_name='p2porder',
            constraint=models.CheckConstraint(condition=models.Q(('price__gt', 0)), name='order_price_positive'),
        ),
        migrations.AddConstraint(
            model_name='p2porder',
            constraint=models.CheckConstraint(condition=models.Q(('maker_id', models.F('taker_id')), _negated=True), name='maker_taker_different'),
        ),
        migrations.AddConstraint(
            model_name='p2porder',
            constraint=models.CheckConstraint(condition=models.Q(('transaction_fee__gte', 0)), name='transaction_fee_non_negative'),
        ),
        migrations.AddConstraint(
            model_name='p2pprofile',
            constraint=models.CheckConstraint(condition=models.Q(('user_id__gt', 0)), name='valid_user_id'),
        ),
        migrations.AddConstraint(
            model_name='wallet',
            constraint=models.CheckConstraint(condition=models.Q(('balance__gte', 0)), name='wallet_balance_non_negative'),
        ),
        migrations.AddConstraint(
            model_name='wallet',
            constraint=models.CheckConstraint(condition=models.Q(('locked_balance__gte', 0)), name='wallet_locked_balance_non_negative'),
        ),
        migrations.AddConstraint(
            model_name='wallet',
            constraint=models.CheckConstraint(condition=models.Q(('locked_balance__lte', models.F('balance'))), name='locked_lte_balance'),
        ),
    ]
